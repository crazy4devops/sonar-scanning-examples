pipeline {
    agent any
    stages{
        
        stage("Build Source Code"){
            steps {

                dir('sonarqube-scanner-maven/maven-basic') {
                    sh "mvn install"
                    sh "ls -lrt target/"
                    sh "mv target/*.jar target/sonarscanner-maven-basic-1.0-SNAPSHOT-${BUILD_NUMBER}.jar"
                    sh "ls -lrt target/"
                }
                dir('sonarqube-scanner-maven/maven-multilingual') {
                    sh "mvn install"
                    sh "ls -lrt target/"
                    sh "mv target/*.jar target/sonarscannermaven-multilingual-1.0-SNAPSHOT-${BUILD_NUMBER}.jar"
                    sh "ls -lrt target/"
                }
                dir('sonarqube-scanner-maven/maven-multimodule') {
                    sh "mvn install"
                    sh "ls -lrt tests/target/"
                    sh "mv tests/target/*.jar tests/target/sonarscanner-maven-multimodule-1.0-SNAPSHOT-${BUILD_NUMBER}.jar"
                    sh "ls -lrt tests/target/"
                }
            }
        }
        stage("Run Unit-Tests"){
            steps {
                dir('sonarqube-scanner-maven/maven-basic') {
                    sh "mvn test"
                }
                dir('sonarqube-scanner-maven/maven-multilingual') {
                    sh "mvn test"
                }
                dir('sonarqube-scanner-maven/maven-multimodule') {
                    sh "mvn test"
                }
            }
        }
        stage('Sonarqube Analysis') {
            environment {
              def scannerHome = tool 'sonar4.8'
            }
            steps {  
                withSonarQubeEnv('venkat-sonarqube-server') {
                    dir('sonarqube-scanner-maven/maven-basic') {
                        sh "${scannerHome}/bin/sonar-scanner"
                    }
                    dir('sonarqube-scanner-maven/maven-multilingual') {
                        sh "${scannerHome}/bin/sonar-scanner"
                    }
                    dir('sonarqube-scanner-maven/maven-multimodule') {
                        sh "${scannerHome}/bin/sonar-scanner"
                    }
                }
            }
        }

        stage("Quality Gate") {
            steps {
                timeout(time: 30, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        // stage("Upload Artifacts"){
        //     steps{
        //         dir('sonarqube-scanner-maven/maven-basic'){
        //             rtUpload (
        //                 serverId: 'jfrog-server',
        //                 spec: '''{
        //                     "files": [
        //                         {
        //                         "pattern": "target/*.jar",
        //                         "target": "dummyrepo/froggy-files/"
        //                         }
        //                     ]
        //                 }''',
        //             )

        //         }
                    
        //     }
        // }            

        // stage("Deploy - DEV"){
        //     steps{
        //         echo "Running Deployment on Dev"
        //     }
        // }  
        
        // stage("Deploy - UAT"){
        //     steps{
        //         echo "Running Deployment on UAT"
        //     }
        // }
        // stage("Deploy - PRD"){
        //     steps{
        //         echo "Running Deployment on PRD"
        //     }
        // } 
    
    }
    post {
        always {
            cleanWs()
        }
    }
}
